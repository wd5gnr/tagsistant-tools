#!/bin/bash


# Al Williams al.williams@awce.com

# tagmerge is a bash script to work with tagsistant (www.tagsistant.net)
#
# Copyright (C) 2014 Al Williams (al.williams@awce.com)
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.


# Just for fun, handle long options

# First get the arguments in an arry
args=( "$@" )
# Now list all long options next to their short equivalents
# The first argument will be used for anything that
# doesn't match that is an -- option
# so it should probably be help

# Note that -- will stop scanning arguments

long_args=( --help -h --tag-root -r --dry-run -d  --keep-tag -k )

# for each argument until ""
I=0
while [ ! -z "${args[$I]}" ]
  do
    parm="${args[$I]}"
# don't do anyting if does not start with --
    if [ "${parm:0:2}" != "--" ] 
    then 
	I=$((I+1))
	continue
    fi
# check for end of long arguments
    if [ "$parm" == "--" ]
    then
# delete -- and stop processing -- arguments
	args=( "${args[@]:0:$I}" "${args[@]:$((I+1))}" )
	break
    fi 
# For each long_arg (until "")
    larg=${long_args[0]}
    J=0
    lfound=0
    while [ ! -z "$larg" ]
    do
	if [ "$larg" == "$parm" ]
	  then
# found it so substitute
	  lfound=1
          args[$I]=${long_args[$((J+1))]}
	  break  # done with this loop
	fi 
# skip to next long name
	J=$((J+2))
	larg=${long_args[$J]}
    done

    if [ "$lfound" == 0 ]
      then 
# didn't find long option so use first (presumably --help)      
	args[$I]=${long_args[1]}
      fi 

# Next parameter
    I=$(( I + 1 ))
done

# Ok all long arguments converted so put them back
set -- "${args[@]}"



# process options
if [ -z "$TAGROOT" ]
then 
  TAGROOT=~/files
fi
DRYRUN=0
KEEPTAG=0

function v { true 
}

while getopts hr:dvD arg
do
    case $arg in
	
      k) 
	    KEEPTAG=1
;;
      D)  
      	    set -x
;;
      r)
	    TAGROOT="$OPTARG"
;;
      d)
	    DRYRUN=1
	    echo Dry run mode selected
;;
      v)
         function v { 
	     echo $@ 
	 }
;;
      h|\?|:)
	  >&2  cat <<EOF
tagmerge is a bash script to work with tagsistant (http://www.tagsistant.net)

Version 1.0 13 Nov 2014
Copyright (C) 2014 Al Williams (al.williams@awce.com)

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.

tagmerge by Al Williams (al.williams@awce.com)
Usage:
tagmerge [-r tag_root_directory] [-h] [-d] [-k] [-v] from_tag to_tag

-r (--tag-root) Sets the target directory
-h (--help) Shows this message (or any bad option)
-k (--keep-tag) Don't delete tag when done
-v Verbose mode (for debugging)
-d (--dry-run) Don't actually do anything, just print what would happen

Home: https://github.com/wd5gnr/tagsistant-tools

EOF
    exit 1
;;
    esac
done

shift $((OPTIND-1))


if [ "$DRYRUN" == 0 ]
then
  ECHO=
else
  ECHO=echo
fi

if [ $# == 0 ]
then
  echo Usage:
  echo tagmerge [-r tag_root_directory] [-h] [-d] [-v] from_tag to_tag
  echo tag -h for more info
  exit 1
fi
FROM="$1"
TO="$2"
for F in "$TAGROOT/store/$FROM/@@/"*
do
       CTAGS=`cat "$F.tags" | awk -v TO="$TO" -v FROM="$FROM" ' { if ($0 != FROM && $0 != TO ) printf "%s", $0 "/" } '`
       $ECHO mv "$F" "$TAGROOT/store/$CTAGS$TO/@@"
done
if [ "$KEEPTAG" == 0 ]
then rm -r "$TAGROOT/tags/$FROM"
fi
exit 0
